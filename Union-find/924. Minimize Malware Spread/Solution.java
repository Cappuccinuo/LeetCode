class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int m = graph.length;
        int n = graph[0].length;
        int i, j;
        UnionFind uf = new UnionFind(m);
        for (i = 0; i < m; i++) {
            for (j = i; j < n; j++) {
                if (graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        int max = 0;
        int index = initial[0];
        for (i = 0; i < initial.length; i++) {
            int root = uf.find(initial[i]);
            int size = uf.size[root];
            if (size > max) {
                max = size;
                index = initial[i];
            }
            if (size == max && initial[i] < index) {
                index = initial[i];
            }
        }
        return index;
    }
}

class UnionFind {
    int[] father;
    int[] size;
    
    UnionFind(int N) {
        this.father = new int[N];
        this.size = new int[N];
        int i;
        for (i = 0; i < N; i++) {
            father[i] = i;
            size[i] = 1;
        }
    }
    
    void union(int a, int b) {
        int root_a = find(a);
        int root_b = find(b);
        if (root_a != root_b) {
            father[root_a] = root_b;
            size[root_b] += size[root_a];
        }
    }
    
    int find(int x) {
        if (father[x] == x) {
            return x;
        }
        Stack<Integer> stack = new Stack<>();
        while (father[x] != x) {
            stack.push(x);
            x = father[x];
        }
        while (!stack.isEmpty()) {
            father[stack.pop()] = x;
        }
        return x;
    }
}